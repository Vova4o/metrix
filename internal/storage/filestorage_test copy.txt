package storage

import (
	"encoding/json"
	"fmt"
	"os"
	"testing"
	"time"
)

func TestNewFileStorage(t *testing.T) {
	memStorage := NewMemStorage()
	storeInterval := 200
	fileStoragePath := "/tmp/test-metrics-db.json"
	restore := false

	fs, err := NewFileStorage(memStorage, storeInterval, fileStoragePath, restore)
	if err != nil {
		t.Errorf("unexpected error: %v", err)
	}

	if fs.memStorage != memStorage {
		t.Errorf("expected memStorage to be set")
	}
	if fs.storeInterval != storeInterval {
		t.Errorf("expected storeInterval to be %d, got %d", storeInterval, fs.storeInterval)
	}
	if fs.fileStoragePath != fileStoragePath {
		t.Errorf("expected fileStoragePath to be %s, got %s", fileStoragePath, fs.fileStoragePath)
	}
	if fs.restore != restore {
		t.Errorf("expected restore to be %v, got %v", restore, fs.restore)
	}
}

func TestNewFileStorage_InvalidStoreInterval(t *testing.T) {
	memStorage := NewMemStorage()
	storeInterval := 0
	fileStoragePath := "/tmp/test-metrics-db.json"
	restore := false

	_, err := NewFileStorage(memStorage, storeInterval, fileStoragePath, restore)
	if err == nil {
		t.Errorf("expected an error for invalid storeInterval")
	}
}

func TestNewFileStorage_EmptyFileStoragePath(t *testing.T) {
	memStorage := NewMemStorage()
	storeInterval := 200
	fileStoragePath := ""
	restore := false

	_, err := NewFileStorage(memStorage, storeInterval, fileStoragePath, restore)
	if err == nil {
		t.Errorf("expected an error for empty fileStoragePath")
	}
}

func TestNewFileStorage_RestoreWithEmptyFileStoragePath(t *testing.T) {
	memStorage := NewMemStorage()
	storeInterval := 200
	fileStoragePath := ""
	restore := true

	_, err := NewFileStorage(memStorage, storeInterval, fileStoragePath, restore)
	if err == nil {
		t.Errorf("expected an error for restore with empty fileStoragePath")
	}
}

func TestFileStorage_LoadFromFile(t *testing.T) {
	memStorage := NewMemStorage()
	storeInterval := 20
	fileStoragePath := "/tmp/test-metrics-db.json"
	restore := false

	fs, err := NewFileStorage(memStorage, storeInterval, fileStoragePath, restore)
	if err != nil {
		t.Errorf("unexpected error: %v", err)
	}

	data := &MemStorage{
		GaugeMetrics: map[string]float64{
			"Alloc":       2139136,
			"BuckHashSys": 7708,
		},
		CounterMetrics: map[string]int64{
			"PollCount": 25,
		},
		Err: nil,
	}

	jsonData, err := json.Marshal(data)
	if err != nil {
		t.Errorf("failed to marshal data: %v", err)
	}

	err = os.WriteFile(fs.fileStoragePath, jsonData, 0o644)
	if err != nil {
		t.Errorf("failed to write data to file: %v", err)
	}

	// Read the file and check its contents
	contents, err := os.ReadFile(fs.fileStoragePath)
	if err != nil {
		t.Errorf("failed to read file: %v", err)
	}
	if string(contents) != string(jsonData) {
		t.Errorf("unexpected file contents: got %s, want %s", contents, jsonData)
	}

	err = fs.LoadFromFile() // Read from the fileStoragePath
	if err != nil {
		t.Errorf("unexpected error: %v", err)
	}

	// Print the state of FileStorage object after loading from file
	fmt.Printf("FileStorage after loading from file: %+v\n", fs)

	// Verify that the metrics are loaded correctly
	gauge1, ok := fs.GetGauge("Alloc")
	if !ok {
		t.Errorf("expected Alloc to exist")
	}
	if gauge1 != 2139136 {
		t.Errorf("expected Alloc value to be 2139136, got %f", gauge1)
	}

	gauge2, ok := fs.GetGauge("BuckHashSys")
	if !ok {
		t.Errorf("expected BuckHashSys to exist")
	}
	if gauge2 != 7708 {
		t.Errorf("expected BuckHashSys value to be 7708, got %f", gauge2)
	}
}

func TestFileStorage_SaveToFile(t *testing.T) {
	memStorage := NewMemStorage()
	storeInterval := 200
	fileStoragePath := "/tmp/test-metrics-db.json"
	restore := false

	fs, err := NewFileStorage(memStorage, storeInterval, fileStoragePath, restore)
	if err != nil {
		t.Errorf("unexpected error: %v", err)
	}

	// Set some metrics in the memStorage
	fs.SetGauge("metric1", 10.5)
	fs.SetGauge("metric2", 20.5)

	err = fs.SaveToFile()
	if err != nil {
		t.Errorf("unexpected error: %v", err)
	}

	// Read the saved file and verify the contents
	data, err := os.ReadFile(fileStoragePath)
	if err != nil {
		t.Errorf("failed to read file: %v", err)
	}

	err = json.Unmarshal(data, &memStorage)
	if err != nil {
		t.Errorf("failed to unmarshal data: %v", err)
	}

	gauge1, ok := memStorage.GaugeMetrics["metric1"]
	if !ok {
		t.Errorf("metric1 not found")
	}
	if gauge1 != 10.5 {
		t.Errorf("expected metric1 value to be 10.5, got %f", gauge1)
	}

	gauge2, ok := memStorage.GaugeMetrics["metric2"]
	if !ok {
		t.Errorf("expected metric2 to exist")
	}
	if gauge2 != 20.5 {
		t.Errorf("expected metric2 value to be 20.5, got %f", gauge2)
	}
}

func TestFileStorage_SaveToFile_Error(t *testing.T) {
	memStorage := NewMemStorage()
	storeInterval := 200
	fileStoragePath := "/tmp/test-metrics-db.json"
	restore := false

	fs, err := NewFileStorage(memStorage, storeInterval, fileStoragePath, restore)
	if err != nil {
		t.Errorf("unexpected error: %v", err)
	}

	// Set some metrics in the memStorage
	fs.SetGauge("metric1", 10.5)
	fs.SetGauge("metric2", 20.5)

	// Set an invalid fileStoragePath to trigger an error
	fs.fileStoragePath = "/invalid/path"

	err = fs.SaveToFile()
	if err == nil {
		t.Errorf("expected an error when saving to an invalid fileStoragePath")
	}
}

func TestFileStorage_saveAtInterval(t *testing.T) {
	memStorage := NewMemStorage()
	storeInterval := 1
	fileStoragePath := "/tmp/test-metrics-db.json"
	restore := false

	fs, err := NewFileStorage(memStorage, storeInterval, fileStoragePath, restore)
	if err != nil {
		t.Errorf("unexpected error: %v", err)
	}

	// Set some metrics in the memStorage
	fs.SetGauge("metric1", 10.5)
	fs.SetGauge("metric2", 20.5)

	// Wait for the save interval to trigger
	time.Sleep(2 * time.Second)

	// Read the saved file and verify the contents
	data, err := os.ReadFile(fileStoragePath)
	if err != nil {
		t.Errorf("failed to read file: %v", err)
	}
	
	fmt.Printf("Data: %s\n", data) // Add this line
	
	err = json.Unmarshal(data, &memStorage)
	if err != nil {
		t.Errorf("failed to unmarshal data: %v", err)
	}

	gauge1, ok := memStorage.GaugeMetrics["metric1"]
	if !ok {
		t.Errorf("expected metric1 to exist")
	}
	if gauge1 != 10.5 {
		t.Errorf("expected metric1 value to be 10.5, got %f", gauge1)
	}

	gauge2, ok := memStorage.GaugeMetrics["metric2"]
	if !ok {
		t.Errorf("expected metric2 to exist")
	}
	if gauge2 != 20.5 {
		t.Errorf("expected metric2 value to be 20.5, got %f", gauge2)
	}
}
